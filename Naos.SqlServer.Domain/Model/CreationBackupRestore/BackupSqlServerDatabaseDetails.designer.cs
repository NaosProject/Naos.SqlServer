// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.129.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.SqlServer.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class BackupSqlServerDatabaseDetails : IModel<BackupSqlServerDatabaseDetails>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="BackupSqlServerDatabaseDetails"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(BackupSqlServerDatabaseDetails left, BackupSqlServerDatabaseDetails right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="BackupSqlServerDatabaseDetails"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(BackupSqlServerDatabaseDetails left, BackupSqlServerDatabaseDetails right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(BackupSqlServerDatabaseDetails other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.BackupTo.IsEqualTo(other.BackupTo)
                      && this.ChecksumOption.IsEqualTo(other.ChecksumOption)
                      && this.Cipher.IsEqualTo(other.Cipher)
                      && this.CompressionOption.IsEqualTo(other.CompressionOption)
                      && this.Credential.IsEqualTo(other.Credential, StringComparer.Ordinal)
                      && this.Description.IsEqualTo(other.Description, StringComparer.Ordinal)
                      && this.Device.IsEqualTo(other.Device)
                      && this.Encryptor.IsEqualTo(other.Encryptor)
                      && this.EncryptorName.IsEqualTo(other.EncryptorName, StringComparer.Ordinal)
                      && this.ErrorHandling.IsEqualTo(other.ErrorHandling)
                      && this.Name.IsEqualTo(other.Name, StringComparer.Ordinal);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as BackupSqlServerDatabaseDetails);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.BackupTo)
            .Hash(this.ChecksumOption)
            .Hash(this.Cipher)
            .Hash(this.CompressionOption)
            .Hash(this.Credential)
            .Hash(this.Description)
            .Hash(this.Device)
            .Hash(this.Encryptor)
            .Hash(this.EncryptorName)
            .Hash(this.ErrorHandling)
            .Hash(this.Name)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public BackupSqlServerDatabaseDetails DeepClone()
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="BackupTo" />.
        /// </summary>
        /// <param name="backupTo">The new <see cref="BackupTo" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="backupTo" /> for <see cref="BackupTo" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithBackupTo(Uri backupTo)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 backupTo,
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChecksumOption" />.
        /// </summary>
        /// <param name="checksumOption">The new <see cref="ChecksumOption" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="checksumOption" /> for <see cref="ChecksumOption" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithChecksumOption(ChecksumOption checksumOption)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 checksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Cipher" />.
        /// </summary>
        /// <param name="cipher">The new <see cref="Cipher" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="cipher" /> for <see cref="Cipher" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithCipher(Cipher cipher)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CompressionOption" />.
        /// </summary>
        /// <param name="compressionOption">The new <see cref="CompressionOption" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="compressionOption" /> for <see cref="CompressionOption" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithCompressionOption(CompressionOption compressionOption)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 compressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Credential" />.
        /// </summary>
        /// <param name="credential">The new <see cref="Credential" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="credential" /> for <see cref="Credential" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithCredential(string credential)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 credential,
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Description" />.
        /// </summary>
        /// <param name="description">The new <see cref="Description" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="description" /> for <see cref="Description" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithDescription(string description)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 description,
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Device" />.
        /// </summary>
        /// <param name="device">The new <see cref="Device" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="device" /> for <see cref="Device" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithDevice(Device device)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Encryptor" />.
        /// </summary>
        /// <param name="encryptor">The new <see cref="Encryptor" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="encryptor" /> for <see cref="Encryptor" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithEncryptor(Encryptor encryptor)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="EncryptorName" />.
        /// </summary>
        /// <param name="encryptorName">The new <see cref="EncryptorName" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="encryptorName" /> for <see cref="EncryptorName" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithEncryptorName(string encryptorName)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 encryptorName,
                                 this.ErrorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ErrorHandling" />.
        /// </summary>
        /// <param name="errorHandling">The new <see cref="ErrorHandling" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="errorHandling" /> for <see cref="ErrorHandling" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithErrorHandling(ErrorHandling errorHandling)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 errorHandling,
                                 this.Name?.Clone().ToString());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Name" />.
        /// </summary>
        /// <param name="name">The new <see cref="Name" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="BackupSqlServerDatabaseDetails" /> using the specified <paramref name="name" /> for <see cref="Name" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public BackupSqlServerDatabaseDetails DeepCloneWithName(string name)
        {
            var result = new BackupSqlServerDatabaseDetails(
                                 new Uri(this.BackupTo.AbsoluteUri),
                                 this.ChecksumOption,
                                 this.Cipher,
                                 this.CompressionOption,
                                 this.Credential?.Clone().ToString(),
                                 this.Description?.Clone().ToString(),
                                 this.Device,
                                 this.Encryptor,
                                 this.EncryptorName?.Clone().ToString(),
                                 this.ErrorHandling,
                                 name);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Naos.SqlServer.Domain.BackupSqlServerDatabaseDetails: BackupTo = {this.BackupTo?.ToString() ?? "<null>"}, ChecksumOption = {this.ChecksumOption.ToString() ?? "<null>"}, Cipher = {this.Cipher.ToString() ?? "<null>"}, CompressionOption = {this.CompressionOption.ToString() ?? "<null>"}, Credential = {this.Credential?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Description = {this.Description?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Device = {this.Device.ToString() ?? "<null>"}, Encryptor = {this.Encryptor.ToString() ?? "<null>"}, EncryptorName = {this.EncryptorName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ErrorHandling = {this.ErrorHandling.ToString() ?? "<null>"}, Name = {this.Name?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}.");

            return result;
        }
    }
}