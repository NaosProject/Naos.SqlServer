// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.129.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.SqlServer.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::Naos.Database.Domain;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class RestoreSqlServerDatabaseDetails : IModel<RestoreSqlServerDatabaseDetails>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="RestoreSqlServerDatabaseDetails"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(RestoreSqlServerDatabaseDetails left, RestoreSqlServerDatabaseDetails right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="RestoreSqlServerDatabaseDetails"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(RestoreSqlServerDatabaseDetails left, RestoreSqlServerDatabaseDetails right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(RestoreSqlServerDatabaseDetails other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.ChecksumOption.IsEqualTo(other.ChecksumOption)
                      && this.Credential.IsEqualTo(other.Credential, StringComparer.Ordinal)
                      && this.DataFilePath.IsEqualTo(other.DataFilePath, StringComparer.Ordinal)
                      && this.Device.IsEqualTo(other.Device)
                      && this.ErrorHandling.IsEqualTo(other.ErrorHandling)
                      && this.LogFilePath.IsEqualTo(other.LogFilePath, StringComparer.Ordinal)
                      && this.RecoveryOption.IsEqualTo(other.RecoveryOption)
                      && this.ReplaceOption.IsEqualTo(other.ReplaceOption)
                      && this.RestoreFrom.IsEqualTo(other.RestoreFrom)
                      && this.RestrictedUserOption.IsEqualTo(other.RestrictedUserOption);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as RestoreSqlServerDatabaseDetails);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ChecksumOption)
            .Hash(this.Credential)
            .Hash(this.DataFilePath)
            .Hash(this.Device)
            .Hash(this.ErrorHandling)
            .Hash(this.LogFilePath)
            .Hash(this.RecoveryOption)
            .Hash(this.ReplaceOption)
            .Hash(this.RestoreFrom)
            .Hash(this.RestrictedUserOption)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public RestoreSqlServerDatabaseDetails DeepClone()
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChecksumOption" />.
        /// </summary>
        /// <param name="checksumOption">The new <see cref="ChecksumOption" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="checksumOption" /> for <see cref="ChecksumOption" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithChecksumOption(ChecksumOption checksumOption)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 checksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Credential" />.
        /// </summary>
        /// <param name="credential">The new <see cref="Credential" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="credential" /> for <see cref="Credential" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithCredential(string credential)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 credential,
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="DataFilePath" />.
        /// </summary>
        /// <param name="dataFilePath">The new <see cref="DataFilePath" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="dataFilePath" /> for <see cref="DataFilePath" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithDataFilePath(string dataFilePath)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 dataFilePath,
                                 this.Device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Device" />.
        /// </summary>
        /// <param name="device">The new <see cref="Device" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="device" /> for <see cref="Device" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithDevice(Device device)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ErrorHandling" />.
        /// </summary>
        /// <param name="errorHandling">The new <see cref="ErrorHandling" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="errorHandling" /> for <see cref="ErrorHandling" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithErrorHandling(ErrorHandling errorHandling)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 errorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="LogFilePath" />.
        /// </summary>
        /// <param name="logFilePath">The new <see cref="LogFilePath" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="logFilePath" /> for <see cref="LogFilePath" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithLogFilePath(string logFilePath)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 this.ErrorHandling,
                                 logFilePath,
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="RecoveryOption" />.
        /// </summary>
        /// <param name="recoveryOption">The new <see cref="RecoveryOption" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="recoveryOption" /> for <see cref="RecoveryOption" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithRecoveryOption(RecoveryOption recoveryOption)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 recoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReplaceOption" />.
        /// </summary>
        /// <param name="replaceOption">The new <see cref="ReplaceOption" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="replaceOption" /> for <see cref="ReplaceOption" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithReplaceOption(ReplaceOption replaceOption)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 replaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="RestoreFrom" />.
        /// </summary>
        /// <param name="restoreFrom">The new <see cref="RestoreFrom" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="restoreFrom" /> for <see cref="RestoreFrom" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithRestoreFrom(Uri restoreFrom)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 restoreFrom,
                                 this.RestrictedUserOption);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="RestrictedUserOption" />.
        /// </summary>
        /// <param name="restrictedUserOption">The new <see cref="RestrictedUserOption" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RestoreSqlServerDatabaseDetails" /> using the specified <paramref name="restrictedUserOption" /> for <see cref="RestrictedUserOption" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RestoreSqlServerDatabaseDetails DeepCloneWithRestrictedUserOption(RestrictedUserOption restrictedUserOption)
        {
            var result = new RestoreSqlServerDatabaseDetails(
                                 this.ChecksumOption,
                                 this.Credential?.Clone().ToString(),
                                 this.DataFilePath?.Clone().ToString(),
                                 this.Device,
                                 this.ErrorHandling,
                                 this.LogFilePath?.Clone().ToString(),
                                 this.RecoveryOption,
                                 this.ReplaceOption,
                                 new Uri(this.RestoreFrom.AbsoluteUri),
                                 restrictedUserOption);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Naos.SqlServer.Domain.RestoreSqlServerDatabaseDetails: ChecksumOption = {this.ChecksumOption.ToString() ?? "<null>"}, Credential = {this.Credential?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DataFilePath = {this.DataFilePath?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Device = {this.Device.ToString() ?? "<null>"}, ErrorHandling = {this.ErrorHandling.ToString() ?? "<null>"}, LogFilePath = {this.LogFilePath?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, RecoveryOption = {this.RecoveryOption.ToString() ?? "<null>"}, ReplaceOption = {this.ReplaceOption.ToString() ?? "<null>"}, RestoreFrom = {this.RestoreFrom?.ToString() ?? "<null>"}, RestrictedUserOption = {this.RestrictedUserOption.ToString() ?? "<null>"}.");

            return result;
        }
    }
}