// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ConnectionStringHelper.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Database.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Database.Recipes
{
    using global::System;
    using global::System.Data.SqlClient;
    using global::System.Globalization;

    using static global::System.FormattableString;

    /// <summary>
    /// Provides various methods for manipulating connection strings.
    /// </summary>
#if !OBeautifulCodeDatabaseSolution
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Database.Recipes", "See package version number")]
    internal
#else
    public
#endif
    static class ConnectionStringHelper
    {
        /// <summary>
        /// Builds a connection string from provided details, simple wrapper around <see cref="SqlConnectionStringBuilder" />.
        /// </summary>
        /// <param name="serverName">Name, DNS, or IP of the server.</param>
        /// <param name="port">Optional port number to use.  DEFAULT is to omit the port number; this results in the driver choosing the default port.</param>
        /// <param name="instanceName">Optional instance name to use.  This would be @@servicename in T-SQL (e.g. MSSQLSERVER, SQLExpress).  DEFAULT is to use <paramref name="serverName"/> as-is and not append an instance name to that value; this results in connecting to the server's default instance.</param>
        /// <param name="databaseName">Optional database name; DEFAULT is 'master'.</param>
        /// <param name="userName">Optional username to authenticate with; DEFAULT is null and will use trusted authentication.</param>
        /// <param name="clearTextPassword">Optional clear-text password to authenticate with; DEFAULT is null and will use trusted authentication.</param>
        /// <param name="connectionTimeoutInSeconds">Optional  length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.  DEFAULT is omit any specification of a timeout; this results in the use of the driver's default timeout.</param>
        /// <returns>
        /// The connection string.
        /// </returns>
        public static string BuildConnectionString(
            string serverName,
            int? port = null,
            string instanceName = null,
            string databaseName = null,
            string userName = null,
            string clearTextPassword = null,
            int? connectionTimeoutInSeconds = null)
        {
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }

            if (string.IsNullOrWhiteSpace(serverName))
            {
                throw new ArgumentException(Invariant($"{nameof(serverName)} is white space"));
            }

            if (port != null)
            {
                var invalidPortExceptionMessage = Invariant($"{nameof(port)} is not a valid port number.  Should be 1 to {ushort.MaxValue}.");

                try
                {
                    // ReSharper disable once ReturnValueOfPureMethodIsNotUsed
                    Convert.ToUInt16(port, CultureInfo.InvariantCulture);
                }
                catch (OverflowException)
                {
                    throw new ArgumentOutOfRangeException(invalidPortExceptionMessage);
                }

                if (port == 0)
                {
                    throw new ArgumentOutOfRangeException(invalidPortExceptionMessage);
                }
            }

            var instanceNameAddIn = string.IsNullOrWhiteSpace(instanceName) ? string.Empty : Invariant($"\\{instanceName}");

            var portAddIn = port == null ? string.Empty : Invariant($":{port}");

            var builder = new SqlConnectionStringBuilder
            {
                DataSource = serverName + portAddIn + instanceNameAddIn,
                InitialCatalog = string.IsNullOrWhiteSpace(databaseName) ? "master" : databaseName,
                IntegratedSecurity = string.IsNullOrWhiteSpace(userName),
            };

            if (connectionTimeoutInSeconds != null)
            {
                builder.ConnectTimeout = (int)connectionTimeoutInSeconds;
            }

            if (!string.IsNullOrWhiteSpace(userName))
            {
                builder.UserID = userName;
            }

            if (!string.IsNullOrWhiteSpace(clearTextPassword))
            {
                builder.Password = clearTextPassword;
            }

            var result = builder.ConnectionString;

            return result;
        }

        /// <summary>
        /// Will add replace the initial catalog in the connection string as the provided database name.
        /// </summary>
        /// <param name="connectionString">The connection string to the intended server.</param>
        /// <param name="databaseName">The name of the target database.</param>
        /// <returns>
        /// An adjusted connection string, specifying the provided database as the initial catalog.
        /// </returns>
        public static string AddOrUpdateInitialCatalogInConnectionString(
            this string connectionString,
            string databaseName)
        {
            if (connectionString == null)
            {
                throw new ArgumentNullException(nameof(connectionString));
            }

            if (string.IsNullOrWhiteSpace(connectionString))
            {
                throw new ArgumentException(Invariant($"{nameof(connectionString)} is white space"));
            }

            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            if (string.IsNullOrWhiteSpace(databaseName))
            {
                throw new ArgumentException(Invariant($"{nameof(databaseName)} is white space"));
            }

            var builder = new SqlConnectionStringBuilder(connectionString)
            {
                InitialCatalog = databaseName,
            };

            var result = builder.ConnectionString;

            return result;
        }

        /// <summary>
        /// Obfuscates the credentials within a connection string, replacing them with '*****' (5 asterisks).
        /// </summary>
        /// <param name="connectionString">The original connection string.</param>
        /// <param name="obfuscateUserName">Optional value indicating whether to obfuscate the username.  DEFAULT is to obfuscate the username.</param>
        /// <returns>
        /// The specified connection string, with the credentials obfuscated.
        /// </returns>
        public static string ObfuscateCredentialsInConnectionString(
            this string connectionString,
            bool obfuscateUserName = true)
        {
            if (connectionString == null)
            {
                throw new ArgumentNullException(nameof(connectionString));
            }

            if (string.IsNullOrWhiteSpace(connectionString))
            {
                throw new ArgumentException(Invariant($"{nameof(connectionString)} is white space"));
            }

            const string asterisks = "*****";

            var builder = new SqlConnectionStringBuilder(connectionString);

            if (!string.IsNullOrWhiteSpace(builder.Password))
            {
                builder.Password = asterisks;
            }

            if (!string.IsNullOrWhiteSpace(builder.UserID))
            {
                if (obfuscateUserName)
                {
                    builder.UserID = asterisks;
                }
            }

            var result = builder.ConnectionString;

            return result;
        }
    }
}