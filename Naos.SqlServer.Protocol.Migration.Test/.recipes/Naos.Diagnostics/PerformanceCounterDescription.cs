// --------------------------------------------------------------------------------------------------------------------
// <copyright file="PerformanceCounterDescription.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

#if NaosDiagnosticsDomain
namespace Naos.Diagnostics.Domain
#else
namespace Naos.Diagnostics.Recipes
#endif
{
    using System;
    using OBeautifulCode.Equality.Recipes;
    using static System.FormattableString;

    /// <summary>
    /// Model that holds description of a Performance Counter.
    /// </summary>
#if NaosDiagnosticsRecipes
#pragma warning disable SA1649 // File name should match first type name
    [Serializable]
    public class RecipePerformanceCounterDescription : IEquatable<RecipePerformanceCounterDescription>
#pragma warning restore SA1649 // File name should match first type name
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipePerformanceCounterDescription"/> class.
        /// </summary>
        /// <param name="categoryName">Category name.</param>
        /// <param name="counterName">Counter name.</param>
        /// <param name="instanceName">Instance name.</param>
        /// <param name="expectedMinValue">Optional expected minimum value.</param>
        /// <param name="expectedMaxValue">Optional expected maximum value.</param>
        public RecipePerformanceCounterDescription(string categoryName, string counterName, string instanceName = null, float? expectedMinValue = null, float? expectedMaxValue = null)
        {
            this.CategoryName = categoryName;
            this.CounterName = counterName;
            this.InstanceName = instanceName;
            this.ExpectedMinValue = expectedMinValue;
            this.ExpectedMaxValue = expectedMaxValue;
        }

        /// <summary>
        /// Gets the category name.
        /// </summary>
        public string CategoryName { get; private set; }

        /// <summary>
        /// Gets the counter name.
        /// </summary>
        public string CounterName { get; private set; }

        /// <summary>
        /// Gets the instance name.
        /// </summary>
        public string InstanceName { get; private set; }

        /// <summary>
        /// Gets the expected minimum value.
        /// </summary>
        public float? ExpectedMinValue { get; private set; }

        /// <summary>
        /// Gets the expected maximum value.
        /// </summary>
        public float? ExpectedMaxValue { get; private set; }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"RecipePerformanceCounterDescription - {nameof(this.CategoryName)}: {this.CategoryName}; {nameof(this.CounterName)}: {this.CounterName}; {nameof(this.InstanceName)}: {this.InstanceName ?? "<null>"}.");
            return result;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        /// <param name="first">First parameter.</param>
        /// <param name="second">Second parameter.</param>
        /// <returns>A value indicating whether or not the two items are equal.</returns>
        public static bool operator ==(RecipePerformanceCounterDescription first, RecipePerformanceCounterDescription second)
        {
            if (ReferenceEquals(first, second))
            {
                return true;
            }

            if (ReferenceEquals(first, null) || ReferenceEquals(second, null))
            {
                return false;
            }
        
            var result = string.Equals(first.CategoryName, second.CategoryName, StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(first.CounterName, second.CounterName, StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(first.InstanceName, second.InstanceName, StringComparison.OrdinalIgnoreCase) &&
                         first.ExpectedMinValue == second.ExpectedMinValue &&
                         first.ExpectedMaxValue == second.ExpectedMaxValue;

            return result;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        /// <param name="first">First parameter.</param>
        /// <param name="second">Second parameter.</param>
        /// <returns>A value indicating whether or not the two items are inequal.</returns>
        public static bool operator !=(RecipePerformanceCounterDescription first, RecipePerformanceCounterDescription second) => !(first == second);

        /// <inheritdoc />
        public bool Equals(RecipePerformanceCounterDescription other) => this == other;

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as RecipePerformanceCounterDescription);
        
        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.CategoryName)
            .Hash(this.CounterName)
            .Hash(this.InstanceName)
            .Hash(this.ExpectedMinValue)
            .Hash(this.ExpectedMaxValue)
            .Value;
#elif NaosDiagnosticsDomain
    [Serializable]
    public class PerformanceCounterDescription : IEquatable<PerformanceCounterDescription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceCounterDescription"/> class.
        /// </summary>
        /// <param name="categoryName">Category name.</param>
        /// <param name="counterName">Counter name.</param>
        /// <param name="instanceName">Instance name.</param>
        /// <param name="expectedMinValue">Optional expected minimum value.</param>
        /// <param name="expectedMaxValue">Optional expected maximum value.</param>
        public PerformanceCounterDescription(string categoryName, string counterName, string instanceName = null, float? expectedMinValue = null, float? expectedMaxValue = null)
        {
            this.CategoryName = categoryName;
            this.CounterName = counterName;
            this.InstanceName = instanceName;
            this.ExpectedMinValue = expectedMinValue;
            this.ExpectedMaxValue = expectedMaxValue;
        }
        /// <summary>
        /// Gets the category name.
        /// </summary>
        public string CategoryName { get; private set; }

        /// <summary>
        /// Gets the counter name.
        /// </summary>
        public string CounterName { get; private set; }

        /// <summary>
        /// Gets the instance name.
        /// </summary>
        public string InstanceName { get; private set; }

        /// <summary>
        /// Gets the expected minimum value.
        /// </summary>
        public float? ExpectedMinValue { get; private set; }

        /// <summary>
        /// Gets the expected maximum value.
        /// </summary>
        public float? ExpectedMaxValue { get; private set; }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"PerformanceCounterDescription - {nameof(this.CategoryName)}: {this.CategoryName}; {nameof(this.CounterName)}: {this.CounterName}; {nameof(this.InstanceName)}: {this.InstanceName ?? "<null>"}.");
            return result;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        /// <param name="first">First parameter.</param>
        /// <param name="second">Second parameter.</param>
        /// <returns>A value indicating whether or not the two items are equal.</returns>
        public static bool operator ==(PerformanceCounterDescription first, PerformanceCounterDescription second)
        {
            if (ReferenceEquals(first, second))
            {
                return true;
            }

            if (ReferenceEquals(first, null) || ReferenceEquals(second, null))
            {
                return false;
            }

            var result = string.Equals(first.CategoryName, second.CategoryName, StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(first.CounterName, second.CounterName, StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(first.InstanceName, second.InstanceName, StringComparison.OrdinalIgnoreCase) &&
                         first.ExpectedMinValue == second.ExpectedMinValue &&
                         first.ExpectedMaxValue == second.ExpectedMaxValue;

            return result;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        /// <param name="first">First parameter.</param>
        /// <param name="second">Second parameter.</param>
        /// <returns>A value indicating whether or not the two items are inequal.</returns>
        public static bool operator !=(PerformanceCounterDescription first, PerformanceCounterDescription second) => !(first == second);

        /// <inheritdoc />
        public bool Equals(PerformanceCounterDescription other) => this == other;

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as PerformanceCounterDescription);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.CategoryName)
            .Hash(this.CounterName)
            .Hash(this.InstanceName)
            .Hash(this.ExpectedMinValue)
            .Hash(this.ExpectedMaxValue)
            .Value;
#else
    [System.CodeDom.Compiler.GeneratedCode("Naos.Diagnostics", "See package version number")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Serializable]
    internal class RecipePerformanceCounterDescription : IEquatable<RecipePerformanceCounterDescription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipePerformanceCounterDescription"/> class.
        /// </summary>
        /// <param name="categoryName">Category name.</param>
        /// <param name="counterName">Counter name.</param>
        /// <param name="instanceName">Instance name.</param>
        /// <param name="expectedMinValue">Optional expected minimum value.</param>
        /// <param name="expectedMaxValue">Optional expected maximum value.</param>
        public RecipePerformanceCounterDescription(string categoryName, string counterName, string instanceName = null, float? expectedMinValue = null, float? expectedMaxValue = null)
        {
            this.CategoryName = categoryName;
            this.CounterName = counterName;
            this.InstanceName = instanceName;
            this.ExpectedMinValue = expectedMinValue;
            this.ExpectedMaxValue = expectedMaxValue;
        }

        /// <summary>
        /// Gets the category name.
        /// </summary>
        public string CategoryName { get; private set; }

        /// <summary>
        /// Gets the counter name.
        /// </summary>
        public string CounterName { get; private set; }

        /// <summary>
        /// Gets the instance name.
        /// </summary>
        public string InstanceName { get; private set; }

        /// <summary>
        /// Gets the expected minimum value.
        /// </summary>
        public float? ExpectedMinValue { get; private set; }

        /// <summary>
        /// Gets the expected maximum value.
        /// </summary>
        public float? ExpectedMaxValue { get; private set; }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"{this.GetType().Name} - {nameof(this.CategoryName)}: {this.CategoryName}; {nameof(this.CounterName)}: {this.CounterName}; {nameof(this.InstanceName)}: {this.InstanceName ?? "<null>"}.");
            return result;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        /// <param name="first">First parameter.</param>
        /// <param name="second">Second parameter.</param>
        /// <returns>A value indicating whether or not the two items are equal.</returns>
        public static bool operator ==(RecipePerformanceCounterDescription first, RecipePerformanceCounterDescription second)
        {
            if (ReferenceEquals(first, second))
            {
                return true;
            }

            if (ReferenceEquals(first, null) || ReferenceEquals(second, null))
            {
                return false;
            }
        
            var result = string.Equals(first.CategoryName, second.CategoryName, StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(first.CounterName, second.CounterName, StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(first.InstanceName, second.InstanceName, StringComparison.OrdinalIgnoreCase) &&
                         first.ExpectedMinValue == second.ExpectedMinValue &&
                         first.ExpectedMaxValue == second.ExpectedMaxValue;

            return result;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        /// <param name="first">First parameter.</param>
        /// <param name="second">Second parameter.</param>
        /// <returns>A value indicating whether or not the two items are inequal.</returns>
        public static bool operator !=(RecipePerformanceCounterDescription first, RecipePerformanceCounterDescription second) => !(first == second);

        /// <inheritdoc />
        public bool Equals(RecipePerformanceCounterDescription other) => this == other;

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as RecipePerformanceCounterDescription);
        
        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.CategoryName)
            .Hash(this.CounterName)
            .Hash(this.InstanceName)
            .Hash(this.ExpectedMinValue)
            .Hash(this.ExpectedMaxValue)
            .Value;
#endif
    }
}
