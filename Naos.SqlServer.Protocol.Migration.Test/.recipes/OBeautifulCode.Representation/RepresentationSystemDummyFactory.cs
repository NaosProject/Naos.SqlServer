// --------------------------------------------------------------------------------------------------------------------
// <copyright file="RepresentationSystemDummyFactory.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Representation.System.Test source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Representation.System.Test
{
    using System;

    using FakeItEasy;

    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq.Expressions;

    using OBeautifulCode.AutoFakeItEasy;
    using OBeautifulCode.Math.Recipes;

    /// <summary>
    /// A Dummy Factory for types in <see cref="OBeautifulCode.Representation.System"/>.
    /// </summary>
#if !OBeautifulCodeRepresentationSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Compression.Test", "See package version number")]
    internal
#else
    public
#endif
    class RepresentationSystemDummyFactory : DefaultRepresentationSystemDummyFactory
    {
        public RepresentationSystemDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    // TypeDummyFactory will return a real, loaded type.
                    var result = A.Dummy<Type>().ToRepresentation();

                    return result;
                });

            // prevent infinite recursion for some derivatives
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    ExpressionRepresentationBase result;

                    var randomNumber = ThreadSafeRandom.Next(0, 3);

                    if (randomNumber == 0)
                    {
                        result = new ConstantExpressionRepresentation<string>(
                            A.Dummy<TypeRepresentation>(),
                            A.Dummy<ExpressionType>(),
                            A.Dummy<string>());
                    }
                    else if (randomNumber == 1)
                    {
                        // this will ensure that type is being properly registered in serialization
                        // because BSON serializes DateTime with 3 f's precision, whereas our
                        // serializer uses 7 f's, so roundtrip serialization will fail if our serializer
                        // is not registered.
                        result = new ConstantExpressionRepresentation<DateTime>(
                            A.Dummy<TypeRepresentation>(),
                            A.Dummy<ExpressionType>(),
                            A.Dummy<DateTime>());
                    }
                    else
                    {
                        result = new ParameterExpressionRepresentation(
                            A.Dummy<TypeRepresentation>(),
                            A.Dummy<string>());
                    }

                    return result;
                });

            // prevent infinite recursion for some derivatives
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    MemberBindingRepresentationBase result;

                    var randomNumber = ThreadSafeRandom.Next(0, 2);

                    if (randomNumber == 0)
                    {
                        result = new MemberAssignmentRepresentation(
                            A.Dummy<TypeRepresentation>(),
                            A.Dummy<MemberInfoRepresentation>(),
                            A.Dummy<ExpressionRepresentationBase>());
                    }
                    else
                    {
                        result = new MemberListBindingRepresentation(
                            A.Dummy<TypeRepresentation>(),
                            A.Dummy<MemberInfoRepresentation>(),
                            A.Dummy<IReadOnlyList<ElementInitRepresentation>>());
                    }

                    return result;
                });
        }
    }
}
