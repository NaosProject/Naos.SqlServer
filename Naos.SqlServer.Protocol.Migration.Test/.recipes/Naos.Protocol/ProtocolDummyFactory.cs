// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ProtocolDummyFactory.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package Naos.Build.Conventions.VisualStudioProjectTemplates.Domain.Test (1.55.27)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Protocol.Domain.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using FakeItEasy;
    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.AutoFakeItEasy;

    /// <summary>
    /// A Dummy Factory for types in <see cref="Naos.Protocol.Domain"/>.
    /// </summary>
#if !NaosProtocolSolution
    [ExcludeFromCodeCoverage]
    [GeneratedCode("Naos.Protocol.Domain.Test", "See package version number")]
    internal
#else
    public
#endif 
        class ProtocolDummyFactory : DefaultProtocolDummyFactory
    {
        public ProtocolDummyFactory()
        {
            /* Add any overriding or custom registrations here. */

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CacheResult<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<DateTime>().ToUniversalTime()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullEvent(
                                 A.Dummy<DateTime>().ToUniversalTime()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullIdentifiedEvent<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<DateTime>().ToUniversalTime()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ExecuteOpRequestedEvent<GetProtocolByTypeOp>(
                    A.Dummy<GetProtocolByTypeOp>(),
                    A.Dummy<DateTime>().ToUniversalTime(),
                    A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ExecuteOpRequestedEvent<Version, GetProtocolByTypeOp>(
                    A.Dummy<Version>(),
                    A.Dummy<GetProtocolByTypeOp>(),
                    A.Dummy<DateTime>().ToUniversalTime(),
                    A.Dummy<string>()));
        }
    }
}
