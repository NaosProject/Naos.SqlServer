// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DateTimeExtensions.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.DateTime.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.DateTime.Recipes
{
    using global::System;

    using static global::System.FormattableString;

    /// <summary>
    /// Extension methods on <see cref="DateTime"/>.
    /// </summary>
#if !OBeautifulCodeDateTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.DateTime.Recipes", "See package version number")]
    internal
#else
    public
#endif
    static class DateTimeExtensions
    {
        /// <summary>
        /// Finds a specified day-of-week after a reference date.
        /// </summary>
        /// <param name="value">The reference date.</param>
        /// <param name="dayOfWeek">The next day-of-week to find.</param>
        /// <returns>
        /// Returns the specified day-of-week that falls after the reference date.
        /// </returns>
        public static System.DateTime Next(
            this DateTime value,
            DayOfWeek dayOfWeek)
        {
            var daysToAdd = (int)dayOfWeek - (int)value.DayOfWeek;
            if (value.DayOfWeek >= dayOfWeek)
            {
                daysToAdd += 7;
            }

            var result = value.AddDays(daysToAdd);

            return result;
        }

        /// <summary>
        /// Finds a specified day-of-week prior to a reference date.
        /// </summary>
        /// <param name="value">The reference date.</param>
        /// <param name="dayOfWeek">The previous day-of-week to find.</param>
        /// <returns>
        /// Returns the specified day-of-week that falls prior to the reference date.
        /// </returns>
        public static DateTime Previous(
            this DateTime value,
            DayOfWeek dayOfWeek)
        {
            var daysToAdd = (int)dayOfWeek - (int)value.DayOfWeek;
            if (value.DayOfWeek <= dayOfWeek)
            {
                daysToAdd -= 7;
            }

            var result = value.AddDays(daysToAdd);

            return result;
        }

        /// <summary>
        /// Converts the provided time into a UTC time.
        /// </summary>
        /// <remarks>
        /// If <paramref name="value"/> is <see cref="DateTimeKind.Unspecified"/>, then the method will
        /// simply change it to <see cref="DateTimeKind.Utc"/>, it will NOT be treated as a local time
        /// as is the case with <see cref="DateTime.ToUniversalTime"/>
        /// </remarks>
        /// <param name="value">The reference time.</param>
        /// <returns>
        /// The UTC time.
        /// </returns>
        public static DateTime ToUtc(
            this DateTime value)
        {
            DateTime result;

            if (value.Kind == DateTimeKind.Utc)
            {
                result = value;
            }
            else if (value.Kind == DateTimeKind.Unspecified)
            {
                result = DateTime.SpecifyKind(value, DateTimeKind.Utc);
            }
            else
            {
                result = value.ToUniversalTime();
            }

            return result;
        }

        /// <summary>
        /// Converts the provided time into a UTC time.
        /// </summary>
        /// <param name="value">The reference time.</param>
        /// <remarks>
        /// If <paramref name="value"/> is <see cref="DateTimeKind.Unspecified"/>, then the method will
        /// simply change it to <see cref="DateTimeKind.Utc"/>, it will NOT be treated as a local time
        /// as is the case with <see cref="DateTime.ToUniversalTime"/>
        /// </remarks>
        /// <returns>
        /// The UTC time.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="NotSupportedException"><paramref name="value"/> <see cref="DateTimeKind"/> is not supported.</exception>
        public static DateTime ToUtc(
            this DateTime? value)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            var result = ((DateTime)value).ToUtc();

            return result;
        }

        /// <summary>
        /// Converts the provided time into an Unspecified time.
        /// </summary>
        /// <param name="value">The reference time.</param>
        /// <returns>
        /// The Unspecified time.
        /// </returns>
        public static DateTime ToUnspecified(
            this DateTime value)
        {
            var result = value.Kind == DateTimeKind.Unspecified
                ? value
                : DateTime.SpecifyKind(value, DateTimeKind.Unspecified);

            return result;
        }

        /// <summary>
        /// Converts the specified time into a Unspecified time.
        /// </summary>
        /// <param name="value">The reference time.</param>
        /// <returns>
        /// The Unspecified time.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static DateTime ToUnspecified(
            this DateTime? value)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            var result = ((DateTime)value).ToUnspecified();

            return result;
        }
    }
}
