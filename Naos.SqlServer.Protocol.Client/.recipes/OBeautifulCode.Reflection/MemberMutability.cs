// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MemberMutability.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Reflection.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Reflection.Recipes
{
    using global::System;
    using global::System.Diagnostics.CodeAnalysis;

    using OBeautifulCode.CodeAnalysis.Recipes;

    /// <summary>
    /// Scopes the search for members based on mutability.
    /// </summary>
    [Flags]
    [SuppressMessage("Microsoft.Naming", "CA1714:FlagsEnumsShouldHavePluralNames", Justification = ObcSuppressBecause.CA1714_FlagsEnumsShouldHavePluralNames_TheNameIsPlural)]
#if !OBeautifulCodeReflectionSolution
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Reflection.Recipes", "See package version number")]
    internal
#else
    public
#endif
    enum MemberMutability
    {
        /// <summary>
        /// None (default).
        /// </summary>
        None = 0,

        /// <summary>
        /// Include members where mutability is applicable (i.e. fields and properties).
        /// </summary>
        Applicable = 1,

        /// <summary>
        /// Include members where mutability is not applicable (i.e. constructors, methods, events).
        /// </summary>
        NotApplicable = 2,

        /// <summary>
        /// Include readable properties and all fields, otherwise not applicable.
        /// </summary>
        Readable = 4,

        /// <summary>
        /// Include writable members.
        /// This is only applicable to fields (readonly and const fields are NOT considered writable) and properties.
        /// </summary>
        Writable = 8,

        /// <summary>
        /// Include members that cannot be written-to.
        /// This is only applicable to fields (readonly and const fields are considered to be not writable) and properties.
        /// </summary>
        NotWritable = 16,

        /// <summary>
        /// Include properties that are not readable.
        /// </summary>
        NotReadable = 32,

        /// <summary>
        /// Include members that cannot be written-to.
        /// This is only applicable to fields (readonly and const) and properties.
        /// </summary>
        ReadOnlyOrConst = NotWritable,

        /// <summary>
        /// Include properties that are not readable.
        /// </summary>
        WriteOnly = NotReadable,

        /// <summary>
        /// Include members where mutability is not applicable and where applicable,
        /// include members with any kind of mutability.
        /// </summary>
        All = Applicable | NotApplicable | Readable | Writable | NotWritable | NotReadable,
    }
}
