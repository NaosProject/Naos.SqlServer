// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ReflectionHelper.Enum.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Reflection.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Reflection.Recipes
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Diagnostics.CodeAnalysis;

    using OBeautifulCode.CodeAnalysis.Recipes;
    using OBeautifulCode.Enum.Recipes;

    using static global::System.FormattableString;

#if !OBeautifulCodeReflectionSolution
    internal
#else
    public
#endif
    static partial class ReflectionHelper
    {
        /// <summary>
        /// Gets all values/members of an enum that have an attribute of a specified type.
        /// </summary>
        /// <typeparam name="TEnum">The type of the enum.</typeparam>
        /// <typeparam name="TAttribute">The type of attribute to search for.</typeparam>
        /// <param name="attributeFilter">
        /// Optional.  When provided, requires that this filter
        /// return true when attributes of the specified type are passed-in,
        /// before the enum value having the specified attribute is returned.
        /// </param>
        /// <returns>
        /// The values/members of a specified enum values where the specified
        /// attribute has been applied at least one, or an empty collection if none of the specified
        /// enum values have that attribute.
        /// </returns>
        /// <exception cref="ArgumentException"><typeparamref name="TEnum"/> is not an enum.</exception>
        [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification = ObcSuppressBecause.CA1004_GenericMethodsShouldProvideTypeParameter_OnlyInputsToMethodAreTypesAndItsMoreConciseToCallMethodUseGenericTypeParameters)]
        public static IReadOnlyCollection<TEnum> GetEnumValuesHaving<TEnum, TAttribute>(
            Func<TAttribute, bool> attributeFilter = null)
            where TEnum : struct
            where TAttribute : Attribute
        {
            if (!typeof(TEnum).IsEnum)
            {
                throw new ArgumentException(Invariant($"typeof({nameof(TEnum)}).IsEnum is false"));
            }

            var result =
                EnumExtensions.GetDefinedEnumValues<TEnum>()
                .Cast<Enum>()
                .Where(
                        _ =>
                            attributeFilter == null
                                ? _.GetAttributesOnEnumValue<TAttribute>().Any()
                                : _.GetAttributesOnEnumValue<TAttribute>().Where(attributeFilter).Any())
                .Cast<TEnum>()
                .ToList()
                .AsReadOnly();

            return result;
        }

        /// <summary>
        /// Gets all values/members of an enum that have an attribute of a specified type.
        /// </summary>
        /// <typeparam name="TAttribute">The type of attribute to search for.</typeparam>
        /// <param name="enumType">The type of the enum.</param>
        /// <param name="attributeFilter">
        /// Optional.  When provided, requires that this filter
        /// return true when attributes of the specified type are passed-in,
        /// before the enum value having the specified attribute is returned.
        /// </param>
        /// <returns>
        /// The values/members of a specified enum values where the specified
        /// attribute has been applied at least one, or an empty collection if none of the specified
        /// enum values have that attribute.
        /// </returns>
        /// <exception cref="ArgumentException"><paramref name="enumType"/> is not an enum.</exception>
        [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification = ObcSuppressBecause.CA1004_GenericMethodsShouldProvideTypeParameter_OnlyInputsToMethodAreTypesAndItsMoreConciseToCallMethodUseGenericTypeParameters)]
        public static IReadOnlyCollection<Enum> GetEnumValuesHaving<TAttribute>(
            this Type enumType,
            Func<TAttribute, bool> attributeFilter = null)
            where TAttribute : Attribute
        {
            if (enumType == null)
            {
                throw new ArgumentNullException(nameof(enumType));
            }

            if (!enumType.IsEnum)
            {
                throw new ArgumentException(Invariant($"{nameof(enumType)}.IsEnum is false"));
            }

            var result =
                enumType.GetDefinedEnumValues()
                    .Where(
                        _ =>
                            attributeFilter == null
                                ? _.GetAttributesOnEnumValue<TAttribute>().Any()
                                : _.GetAttributesOnEnumValue<TAttribute>().Where(attributeFilter).Any())
                    .ToList()
                    .AsReadOnly();

            return result;
        }
    }
}
