// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DatabaseHelper.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Database.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Database.Recipes
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Data;
    using global::System.Data.SqlClient;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    using OBeautifulCode.CodeAnalysis.Recipes;

    using static global::System.FormattableString;

    /// <summary>
    /// Provides various methods for interacting with a database.
    /// </summary>
#if !OBeautifulCodeDatabaseSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Database.Recipes", "See package version number")]
    internal
#else
    [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
    public
#endif
    static partial class DatabaseHelper
    {
        /// <summary>
        /// Opens a SQL Server database connection using a connection string.
        /// </summary>
        /// <param name="connectionString">String used to open a connection to the database.</param>
        /// <param name="sqlInfoMessageEventHandler">OPTIONAL method that will handle the <see cref="SqlConnection.InfoMessage"/> event.</param>
        /// <returns>
        /// An open SQL Server connection.
        /// </returns>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = ObcSuppressBecause.CA2000_DisposeObjectsBeforeLosingScope_DisposableObjectIsMethodReturnObject)]
        public static SqlConnection OpenSqlConnection(
            this string connectionString,
            SqlInfoMessageEventHandler sqlInfoMessageEventHandler = null)
        {
            if (connectionString == null)
            {
                throw new ArgumentNullException(nameof(connectionString));
            }

            if (string.IsNullOrWhiteSpace(connectionString))
            {
                throw new ArgumentException(Invariant($"'{nameof(connectionString)}' is white space"));
            }

            SqlConnection result = null;

            try
            {
                // an invalid connectionString will throw ArgumentException.
                result = new SqlConnection { ConnectionString = connectionString };

                if (sqlInfoMessageEventHandler != null)
                {
                    result.InfoMessage += sqlInfoMessageEventHandler;
                }

                // InvalidOperationException won't be thrown, even if data source or server aren't specified
                // in the connection string.  as long as the connection string is valid,
                // the only possible exception is SqlException
                result.Open();
            }
            catch (Exception)
            {
                if (result != null)
                {
                    // attempt to gracefully detach the event handler (if applicable) before disposing
                    if (sqlInfoMessageEventHandler != null)
                    {
                        try
                        {
                            result.InfoMessage -= sqlInfoMessageEventHandler;
                        }
                        catch (Exception)
                        {
                        }
                    }

                    result.Dispose();
                }

                throw;
            }

            return result;
        }

        /// <summary>
        /// Opens a SQL Server database connection using a connection string.
        /// </summary>
        /// <param name="connectionString">String used to open a connection to the database.</param>
        /// <param name="sqlInfoMessageEventHandler">OPTIONAL method that will handle the <see cref="SqlConnection.InfoMessage"/> event.</param>
        /// <returns>
        /// An open SQL Server connection.
        /// </returns>
        public static async Task<SqlConnection> OpenSqlConnectionAsync(
            this string connectionString,
            SqlInfoMessageEventHandler sqlInfoMessageEventHandler = null)
        {
            if (connectionString == null)
            {
                throw new ArgumentNullException(nameof(connectionString));
            }

            if (string.IsNullOrWhiteSpace(connectionString))
            {
                throw new ArgumentException(Invariant($"'{nameof(connectionString)}' is white space"));
            }

            SqlConnection result = null;

            try
            {
                // an invalid connectionString will throw ArgumentException.
                result = new SqlConnection { ConnectionString = connectionString };

                if (sqlInfoMessageEventHandler != null)
                {
                    result.InfoMessage += sqlInfoMessageEventHandler;
                }

                // InvalidOperationException won't be thrown, even if data source or server aren't specified
                // in the connection string.  as long as the connection string is valid,
                // the only possible exception is SqlException
                await result.OpenAsync();
            }
            catch (Exception)
            {
                if (result != null)
                {
                    // attempt to gracefully detach the event handler (if applicable) before disposing
                    if (sqlInfoMessageEventHandler != null)
                    {
                        try
                        {
                            result.InfoMessage -= sqlInfoMessageEventHandler;
                        }
                        catch (Exception)
                        {
                        }
                    }

                    result.Dispose();
                }

                throw;
            }

            return result;
        }

        /// <summary>
        /// Builds a <see cref="SqlCommand"/> using an existing database connection.
        /// </summary>
        /// <param name="connection">An open connection to the database.</param>
        /// <param name="commandText">The SQL statement, table name, or stored procedure to execute at the data source.</param>
        /// <param name="commandTimeoutInSeconds">OPTIONAL value with the wait time, in seconds, before terminating an attempt to execute the command and generating an error.  DEFAULT is 30 seconds.  A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely).</param>
        /// <param name="commandParameters">OPTIONAL set of parameters to associate with the command.  DEFAULT is null (no parameters).</param>
        /// <param name="commandType">OPTIONAL value that determines how the command text is to be interpreted.  DEFAULT is <see cref="CommandType.Text"/>; a SQL text command.</param>
        /// <param name="transaction">OPTIONAL transaction within which the command will execute.  DEFAULT is null (no transaction).</param>
        /// <param name="prepareCommand">OPTIONAL value indicating whether to prepared (or compile) the command on the data source.</param>
        /// <returns>
        /// The constructed <see cref="SqlCommand"/>.
        /// </returns>
        [SuppressMessage("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities", Justification = "It's convenient to execute a string command and this method does have a parameter for command parameters.")]
        public static SqlCommand BuildSqlCommand(
            this SqlConnection connection,
            string commandText,
            int commandTimeoutInSeconds = 30,
            IReadOnlyList<SqlParameter> commandParameters = null,
            CommandType commandType = CommandType.Text,
            SqlTransaction transaction = null,
            bool prepareCommand = false)
        {
            // check arguments
            if (connection == null)
            {
                throw new ArgumentNullException(nameof(connection));
            }

            if (connection.State != ConnectionState.Open)
            {
                throw new ArgumentOutOfRangeException(Invariant($"connection is in an invalid state: '{connection.State}'.  Must be Open."), (Exception)null);
            }

            if (commandText == null)
            {
                throw new ArgumentNullException(nameof(commandText));
            }

            if (string.IsNullOrWhiteSpace(commandText))
            {
                throw new ArgumentException(Invariant($"'{nameof(commandText)}' is white space"));
            }

            if (commandTimeoutInSeconds < 0)
            {
                throw new ArgumentOutOfRangeException(Invariant($"'{nameof(commandTimeoutInSeconds)}' < '{0}'"), (Exception)null);
            }

            commandParameters = commandParameters ?? new SqlParameter[0];

            if (commandParameters.Any(_ => _ == null))
            {
                throw new ArgumentException(Invariant($"'{nameof(commandParameters)}' contains an element that is null"));
            }

            // validate transaction
            if (transaction != null)
            {
                if (transaction.Connection == null)
                {
                    throw new ArgumentException(Invariant($"{nameof(transaction)} is invalid; its {nameof(SqlTransaction.Connection)} is null."));
                }

                if (transaction.Connection != connection)
                {
                    throw new ArgumentException(Invariant($"{nameof(transaction)} is using a different {nameof(SqlTransaction.Connection)} than the specified {nameof(connection)}."));
                }
            }

            // create the command.  documentation indicates that this will not throw
            var result = connection.CreateCommand();

            try
            {
                // populate command properties
                result.Connection = connection;
                result.CommandType = commandType;
                result.CommandText = commandText;
                result.CommandTimeout = commandTimeoutInSeconds;

                if (transaction != null)
                {
                    result.Transaction = transaction;
                }

                foreach (var parameter in commandParameters)
                {
                    result.Parameters.Add(parameter);
                }

                if (prepareCommand)
                {
                    result.Prepare();
                }

                return result;
            }
            catch (Exception)
            {
                result.Dispose();

                throw;
            }
        }

        /// <summary>
        /// Rollback a transaction with the proper error handling.
        /// </summary>
        /// <param name="transaction">The transaction to rollback.</param>
        public static void RollbackTransaction(
            this SqlTransaction transaction)
        {
            if (transaction == null)
            {
                throw new ArgumentNullException(nameof(transaction));
            }

            if (transaction.Connection == null)
            {
                // try to detect invalid transaction before calling transaction.Rollback()
                throw new InvalidOperationException("Could not roll back transaction " + transaction + " because the the transaction has already been committed or rolled back -or- the connection is broken.");
            }

            try
            {
                transaction.Rollback();
            }
            catch (InvalidOperationException)
            {
                // the transaction has already been committed or rolled back -or- the connection is broken.
                throw;
            }
            catch (Exception rollbackException)
            {
                throw new InvalidOperationException("Failed to rollback transaction.", rollbackException);
            }
        }

        /// <summary>
        /// Returns the bit representation of a boolean.
        /// </summary>
        /// <param name="value">The boolean to evaluate.</param>
        /// <returns>
        /// "1" if boolean is true, "0" if boolean is false.
        /// </returns>
        public static string ToBit(
            this bool value)
        {
            return value ? "1" : "0";
        }
    }
}