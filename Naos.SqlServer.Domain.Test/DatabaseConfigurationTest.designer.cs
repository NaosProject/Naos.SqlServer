// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.139.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.SqlServer.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class DatabaseConfigurationTest
    {
        private static readonly StringRepresentationTestScenarios<DatabaseConfiguration> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<DatabaseConfiguration>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<DatabaseConfiguration>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedStringRepresentation<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"Naos.SqlServer.Domain.DatabaseConfiguration: DatabaseName = {systemUnderTest.DatabaseName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DatabaseType = {systemUnderTest.DatabaseType.ToString() ?? "<null>"}, RecoveryMode = {systemUnderTest.RecoveryMode.ToString() ?? "<null>"}, DataFileLogicalName = {systemUnderTest.DataFileLogicalName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DataFilePath = {systemUnderTest.DataFilePath?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, LogFilePath = {systemUnderTest.LogFilePath?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DataFileCurrentSizeInKb = {systemUnderTest.DataFileCurrentSizeInKb.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DataFileMaxSizeInKb = {systemUnderTest.DataFileMaxSizeInKb.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DataFileGrowthSizeInKb = {systemUnderTest.DataFileGrowthSizeInKb.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, LogFileLogicalName = {systemUnderTest.LogFileLogicalName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, LogFileCurrentSizeInKb = {systemUnderTest.LogFileCurrentSizeInKb.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, LogFileMaxSizeInKb = {systemUnderTest.LogFileMaxSizeInKb.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, LogFileGrowthSizeInKb = {systemUnderTest.LogFileGrowthSizeInKb.ToString(CultureInfo.InvariantCulture) ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<DatabaseConfiguration> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<DatabaseConfiguration>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'databaseName' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             null,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             referenceObject.DataFileLogicalName,
                                             referenceObject.DataFilePath,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             referenceObject.LogFileLogicalName,
                                             referenceObject.LogFilePath,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "databaseName", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentException when parameter 'databaseName' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             referenceObject.DataFileLogicalName,
                                             referenceObject.DataFilePath,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             referenceObject.LogFileLogicalName,
                                             referenceObject.LogFilePath,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "databaseName", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'dataFileLogicalName' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             referenceObject.DatabaseName,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             null,
                                             referenceObject.DataFilePath,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             referenceObject.LogFileLogicalName,
                                             referenceObject.LogFilePath,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "dataFileLogicalName", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentException when parameter 'dataFileLogicalName' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             referenceObject.DatabaseName,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.DataFilePath,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             referenceObject.LogFileLogicalName,
                                             referenceObject.LogFilePath,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "dataFileLogicalName", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'dataFilePath' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             referenceObject.DatabaseName,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             referenceObject.DataFileLogicalName,
                                             null,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             referenceObject.LogFileLogicalName,
                                             referenceObject.LogFilePath,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "dataFilePath", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentException when parameter 'dataFilePath' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             referenceObject.DatabaseName,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             referenceObject.DataFileLogicalName,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             referenceObject.LogFileLogicalName,
                                             referenceObject.LogFilePath,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "dataFilePath", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'logFileLogicalName' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             referenceObject.DatabaseName,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             referenceObject.DataFileLogicalName,
                                             referenceObject.DataFilePath,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             null,
                                             referenceObject.LogFilePath,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "logFileLogicalName", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentException when parameter 'logFileLogicalName' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             referenceObject.DatabaseName,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             referenceObject.DataFileLogicalName,
                                             referenceObject.DataFilePath,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.LogFilePath,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "logFileLogicalName", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'logFilePath' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             referenceObject.DatabaseName,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             referenceObject.DataFileLogicalName,
                                             referenceObject.DataFilePath,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             referenceObject.LogFileLogicalName,
                                             null,
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "logFilePath", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<DatabaseConfiguration>
                {
                    Name = "constructor should throw ArgumentException when parameter 'logFilePath' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new DatabaseConfiguration(
                                             referenceObject.DatabaseName,
                                             referenceObject.DatabaseType,
                                             referenceObject.RecoveryMode,
                                             referenceObject.DataFileLogicalName,
                                             referenceObject.DataFilePath,
                                             referenceObject.DataFileCurrentSizeInKb,
                                             referenceObject.DataFileMaxSizeInKb,
                                             referenceObject.DataFileGrowthSizeInKb,
                                             referenceObject.LogFileLogicalName,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.LogFileCurrentSizeInKb,
                                             referenceObject.LogFileMaxSizeInKb,
                                             referenceObject.LogFileGrowthSizeInKb);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "logFilePath", "white space", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<DatabaseConfiguration> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<DatabaseConfiguration>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "DatabaseName should return same 'databaseName' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.DatabaseName,
                        };

                        return result;
                    },
                    PropertyName = "DatabaseName",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "DatabaseType should return same 'databaseType' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.DatabaseType,
                        };

                        return result;
                    },
                    PropertyName = "DatabaseType",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "RecoveryMode should return same 'recoveryMode' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.RecoveryMode,
                        };

                        return result;
                    },
                    PropertyName = "RecoveryMode",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "DataFileLogicalName should return same 'dataFileLogicalName' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.DataFileLogicalName,
                        };

                        return result;
                    },
                    PropertyName = "DataFileLogicalName",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "DataFilePath should return same 'dataFilePath' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.DataFilePath,
                        };

                        return result;
                    },
                    PropertyName = "DataFilePath",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "DataFileCurrentSizeInKb should return same 'dataFileCurrentSizeInKb' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.DataFileCurrentSizeInKb,
                        };

                        return result;
                    },
                    PropertyName = "DataFileCurrentSizeInKb",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "DataFileMaxSizeInKb should return same 'dataFileMaxSizeInKb' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.DataFileMaxSizeInKb,
                        };

                        return result;
                    },
                    PropertyName = "DataFileMaxSizeInKb",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "DataFileGrowthSizeInKb should return same 'dataFileGrowthSizeInKb' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.DataFileGrowthSizeInKb,
                        };

                        return result;
                    },
                    PropertyName = "DataFileGrowthSizeInKb",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "LogFileLogicalName should return same 'logFileLogicalName' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.LogFileLogicalName,
                        };

                        return result;
                    },
                    PropertyName = "LogFileLogicalName",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "LogFilePath should return same 'logFilePath' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.LogFilePath,
                        };

                        return result;
                    },
                    PropertyName = "LogFilePath",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "LogFileCurrentSizeInKb should return same 'logFileCurrentSizeInKb' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.LogFileCurrentSizeInKb,
                        };

                        return result;
                    },
                    PropertyName = "LogFileCurrentSizeInKb",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "LogFileMaxSizeInKb should return same 'logFileMaxSizeInKb' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.LogFileMaxSizeInKb,
                        };

                        return result;
                    },
                    PropertyName = "LogFileMaxSizeInKb",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<DatabaseConfiguration>
                {
                    Name = "LogFileGrowthSizeInKb should return same 'logFileGrowthSizeInKb' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<DatabaseConfiguration>();

                        var result = new SystemUnderTestExpectedPropertyValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = new DatabaseConfiguration(
                                                      referenceObject.DatabaseName,
                                                      referenceObject.DatabaseType,
                                                      referenceObject.RecoveryMode,
                                                      referenceObject.DataFileLogicalName,
                                                      referenceObject.DataFilePath,
                                                      referenceObject.DataFileCurrentSizeInKb,
                                                      referenceObject.DataFileMaxSizeInKb,
                                                      referenceObject.DataFileGrowthSizeInKb,
                                                      referenceObject.LogFileLogicalName,
                                                      referenceObject.LogFilePath,
                                                      referenceObject.LogFileCurrentSizeInKb,
                                                      referenceObject.LogFileMaxSizeInKb,
                                                      referenceObject.LogFileGrowthSizeInKb),
                            ExpectedPropertyValue = referenceObject.LogFileGrowthSizeInKb,
                        };

                        return result;
                    },
                    PropertyName = "LogFileGrowthSizeInKb",
                });

        private static readonly DeepCloneWithTestScenarios<DatabaseConfiguration> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<DatabaseConfiguration>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithDatabaseName should deep clone object and replace DatabaseName with the provided databaseName",
                    WithPropertyName = "DatabaseName",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.DatabaseName.IsEqualTo(_.DatabaseName));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DatabaseName,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithDatabaseType should deep clone object and replace DatabaseType with the provided databaseType",
                    WithPropertyName = "DatabaseType",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.DatabaseType.IsEqualTo(_.DatabaseType));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DatabaseType,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithRecoveryMode should deep clone object and replace RecoveryMode with the provided recoveryMode",
                    WithPropertyName = "RecoveryMode",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.RecoveryMode.IsEqualTo(_.RecoveryMode));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.RecoveryMode,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithDataFileLogicalName should deep clone object and replace DataFileLogicalName with the provided dataFileLogicalName",
                    WithPropertyName = "DataFileLogicalName",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.DataFileLogicalName.IsEqualTo(_.DataFileLogicalName));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DataFileLogicalName,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithDataFilePath should deep clone object and replace DataFilePath with the provided dataFilePath",
                    WithPropertyName = "DataFilePath",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.DataFilePath.IsEqualTo(_.DataFilePath));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DataFilePath,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithLogFilePath should deep clone object and replace LogFilePath with the provided logFilePath",
                    WithPropertyName = "LogFilePath",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.LogFilePath.IsEqualTo(_.LogFilePath));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.LogFilePath,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithDataFileCurrentSizeInKb should deep clone object and replace DataFileCurrentSizeInKb with the provided dataFileCurrentSizeInKb",
                    WithPropertyName = "DataFileCurrentSizeInKb",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.DataFileCurrentSizeInKb.IsEqualTo(_.DataFileCurrentSizeInKb));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DataFileCurrentSizeInKb,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithDataFileMaxSizeInKb should deep clone object and replace DataFileMaxSizeInKb with the provided dataFileMaxSizeInKb",
                    WithPropertyName = "DataFileMaxSizeInKb",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.DataFileMaxSizeInKb.IsEqualTo(_.DataFileMaxSizeInKb));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DataFileMaxSizeInKb,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithDataFileGrowthSizeInKb should deep clone object and replace DataFileGrowthSizeInKb with the provided dataFileGrowthSizeInKb",
                    WithPropertyName = "DataFileGrowthSizeInKb",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.DataFileGrowthSizeInKb.IsEqualTo(_.DataFileGrowthSizeInKb));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DataFileGrowthSizeInKb,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithLogFileLogicalName should deep clone object and replace LogFileLogicalName with the provided logFileLogicalName",
                    WithPropertyName = "LogFileLogicalName",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.LogFileLogicalName.IsEqualTo(_.LogFileLogicalName));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.LogFileLogicalName,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithLogFileCurrentSizeInKb should deep clone object and replace LogFileCurrentSizeInKb with the provided logFileCurrentSizeInKb",
                    WithPropertyName = "LogFileCurrentSizeInKb",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.LogFileCurrentSizeInKb.IsEqualTo(_.LogFileCurrentSizeInKb));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.LogFileCurrentSizeInKb,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithLogFileMaxSizeInKb should deep clone object and replace LogFileMaxSizeInKb with the provided logFileMaxSizeInKb",
                    WithPropertyName = "LogFileMaxSizeInKb",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.LogFileMaxSizeInKb.IsEqualTo(_.LogFileMaxSizeInKb));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.LogFileMaxSizeInKb,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<DatabaseConfiguration>
                {
                    Name = "DeepCloneWithLogFileGrowthSizeInKb should deep clone object and replace LogFileGrowthSizeInKb with the provided logFileGrowthSizeInKb",
                    WithPropertyName = "LogFileGrowthSizeInKb",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                        var referenceObject = A.Dummy<DatabaseConfiguration>().ThatIs(_ => !systemUnderTest.LogFileGrowthSizeInKb.IsEqualTo(_.LogFileGrowthSizeInKb));

                        var result = new SystemUnderTestDeepCloneWithValue<DatabaseConfiguration>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.LogFileGrowthSizeInKb,
                        };

                        return result;
                    },
                });

        private static readonly DatabaseConfiguration ReferenceObjectForEquatableTestScenarios = A.Dummy<DatabaseConfiguration>();

        private static readonly EquatableTestScenarios<DatabaseConfiguration> EquatableTestScenarios = new EquatableTestScenarios<DatabaseConfiguration>()
            .AddScenario(() =>
                new EquatableTestScenario<DatabaseConfiguration>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new DatabaseConfiguration[]
                    {
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new DatabaseConfiguration[]
                    {
                        new DatabaseConfiguration(
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.DatabaseName.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DatabaseName)).DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.DatabaseType.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DatabaseType)).DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.RecoveryMode.IsEqualTo(ReferenceObjectForEquatableTestScenarios.RecoveryMode)).RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.DataFileLogicalName.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DataFileLogicalName)).DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.DataFilePath.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DataFilePath)).DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.LogFilePath.IsEqualTo(ReferenceObjectForEquatableTestScenarios.LogFilePath)).LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.DataFileCurrentSizeInKb.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb)).DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.DataFileMaxSizeInKb.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb)).DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.DataFileGrowthSizeInKb.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb)).DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.LogFileLogicalName.IsEqualTo(ReferenceObjectForEquatableTestScenarios.LogFileLogicalName)).LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.LogFileCurrentSizeInKb.IsEqualTo(ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb)).LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.LogFileMaxSizeInKb.IsEqualTo(ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb)).LogFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb),
                        new DatabaseConfiguration(
                                ReferenceObjectForEquatableTestScenarios.DatabaseName,
                                ReferenceObjectForEquatableTestScenarios.DatabaseType,
                                ReferenceObjectForEquatableTestScenarios.RecoveryMode,
                                ReferenceObjectForEquatableTestScenarios.DataFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.DataFilePath,
                                ReferenceObjectForEquatableTestScenarios.DataFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileMaxSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.DataFileGrowthSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileLogicalName,
                                ReferenceObjectForEquatableTestScenarios.LogFilePath,
                                ReferenceObjectForEquatableTestScenarios.LogFileCurrentSizeInKb,
                                ReferenceObjectForEquatableTestScenarios.LogFileMaxSizeInKb,
                                A.Dummy<DatabaseConfiguration>().Whose(_ => !_.LogFileGrowthSizeInKb.IsEqualTo(ReferenceObjectForEquatableTestScenarios.LogFileGrowthSizeInKb)).LogFileGrowthSizeInKb),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DatabaseConfiguration___Should_implement_IModel_of_DatabaseConfiguration___When_reflecting()
            {
                // Arrange
                var type = typeof(DatabaseConfiguration);

                var expectedModelMethods = typeof(IModel<DatabaseConfiguration>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<DatabaseConfiguration>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DatabaseConfiguration___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(DatabaseConfiguration);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                // Act
                var actual = (DatabaseConfiguration)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<DatabaseConfiguration>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "DatabaseName", "DatabaseType", "RecoveryMode", "DataFileLogicalName", "DataFilePath", "LogFilePath", "DataFileCurrentSizeInKb", "DataFileMaxSizeInKb", "DataFileGrowthSizeInKb", "LogFileLogicalName", "LogFileCurrentSizeInKb", "LogFileMaxSizeInKb", "LogFileGrowthSizeInKb" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (DatabaseConfiguration)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(DatabaseConfiguration).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var propertyType = propertyInfo.PropertyType;

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = propertyInfo.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<DatabaseConfiguration>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<DatabaseConfiguration>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<DatabaseConfiguration>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<DatabaseConfiguration>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                DatabaseConfiguration systemUnderTest1 = null;
                DatabaseConfiguration systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    DatabaseConfiguration systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                DatabaseConfiguration systemUnderTest1 = null;
                DatabaseConfiguration systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    DatabaseConfiguration systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DatabaseConfiguration___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    DatabaseConfiguration systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DatabaseConfiguration___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DatabaseConfiguration___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DatabaseConfiguration___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DatabaseConfiguration___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}