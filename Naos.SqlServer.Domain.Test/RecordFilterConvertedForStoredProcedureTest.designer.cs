// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.177.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.SqlServer.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::Naos.Database.Domain;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class RecordFilterConvertedForStoredProcedureTest
    {
        private static readonly StringRepresentationTestScenarios<RecordFilterConvertedForStoredProcedure> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<RecordFilterConvertedForStoredProcedure>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedStringRepresentation<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"Naos.SqlServer.Domain.RecordFilterConvertedForStoredProcedure: InternalRecordIdsCsv = {systemUnderTest.InternalRecordIdsCsv?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IdentifierTypeIdsCsv = {systemUnderTest.IdentifierTypeIdsCsv?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ObjectTypeIdsCsv = {systemUnderTest.ObjectTypeIdsCsv?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, StringIdsToMatchXml = {systemUnderTest.StringIdsToMatchXml?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, TagIdsCsv = {systemUnderTest.TagIdsCsv?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, TagMatchStrategy = {systemUnderTest.TagMatchStrategy.ToString() ?? "<null>"}, VersionMatchStrategy = {systemUnderTest.VersionMatchStrategy.ToString() ?? "<null>"}, DeprecatedIdEventTypeIdsCsv = {systemUnderTest.DeprecatedIdEventTypeIdsCsv?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<RecordFilterConvertedForStoredProcedure> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<RecordFilterConvertedForStoredProcedure>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'internalRecordIdsCsv' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             null,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             referenceObject.ObjectTypeIdsCsv,
                                             referenceObject.StringIdsToMatchXml,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "internalRecordIdsCsv", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentException when parameter 'internalRecordIdsCsv' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.IdentifierTypeIdsCsv,
                                             referenceObject.ObjectTypeIdsCsv,
                                             referenceObject.StringIdsToMatchXml,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "internalRecordIdsCsv", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'identifierTypeIdsCsv' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             null,
                                             referenceObject.ObjectTypeIdsCsv,
                                             referenceObject.StringIdsToMatchXml,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "identifierTypeIdsCsv", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentException when parameter 'identifierTypeIdsCsv' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.ObjectTypeIdsCsv,
                                             referenceObject.StringIdsToMatchXml,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "identifierTypeIdsCsv", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'objectTypeIdsCsv' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             null,
                                             referenceObject.StringIdsToMatchXml,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "objectTypeIdsCsv", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentException when parameter 'objectTypeIdsCsv' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.StringIdsToMatchXml,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "objectTypeIdsCsv", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'stringIdsToMatchXml' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             referenceObject.ObjectTypeIdsCsv,
                                             null,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "stringIdsToMatchXml", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentException when parameter 'stringIdsToMatchXml' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             referenceObject.ObjectTypeIdsCsv,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "stringIdsToMatchXml", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'tagIdsCsv' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             referenceObject.ObjectTypeIdsCsv,
                                             referenceObject.StringIdsToMatchXml,
                                             null,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "tagIdsCsv", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentException when parameter 'tagIdsCsv' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             referenceObject.ObjectTypeIdsCsv,
                                             referenceObject.StringIdsToMatchXml,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             referenceObject.DeprecatedIdEventTypeIdsCsv);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "tagIdsCsv", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'deprecatedIdEventTypeIdsCsv' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             referenceObject.ObjectTypeIdsCsv,
                                             referenceObject.StringIdsToMatchXml,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "deprecatedIdEventTypeIdsCsv", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "constructor should throw ArgumentException when parameter 'deprecatedIdEventTypeIdsCsv' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new RecordFilterConvertedForStoredProcedure(
                                             referenceObject.InternalRecordIdsCsv,
                                             referenceObject.IdentifierTypeIdsCsv,
                                             referenceObject.ObjectTypeIdsCsv,
                                             referenceObject.StringIdsToMatchXml,
                                             referenceObject.TagIdsCsv,
                                             referenceObject.TagMatchStrategy,
                                             referenceObject.VersionMatchStrategy,
                                             Invariant($"  {Environment.NewLine}  "));

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "deprecatedIdEventTypeIdsCsv", "white space", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<RecordFilterConvertedForStoredProcedure> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<RecordFilterConvertedForStoredProcedure>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "InternalRecordIdsCsv should return same 'internalRecordIdsCsv' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedPropertyValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = new RecordFilterConvertedForStoredProcedure(
                                                      referenceObject.InternalRecordIdsCsv,
                                                      referenceObject.IdentifierTypeIdsCsv,
                                                      referenceObject.ObjectTypeIdsCsv,
                                                      referenceObject.StringIdsToMatchXml,
                                                      referenceObject.TagIdsCsv,
                                                      referenceObject.TagMatchStrategy,
                                                      referenceObject.VersionMatchStrategy,
                                                      referenceObject.DeprecatedIdEventTypeIdsCsv),
                            ExpectedPropertyValue = referenceObject.InternalRecordIdsCsv,
                        };

                        return result;
                    },
                    PropertyName = "InternalRecordIdsCsv",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "IdentifierTypeIdsCsv should return same 'identifierTypeIdsCsv' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedPropertyValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = new RecordFilterConvertedForStoredProcedure(
                                                      referenceObject.InternalRecordIdsCsv,
                                                      referenceObject.IdentifierTypeIdsCsv,
                                                      referenceObject.ObjectTypeIdsCsv,
                                                      referenceObject.StringIdsToMatchXml,
                                                      referenceObject.TagIdsCsv,
                                                      referenceObject.TagMatchStrategy,
                                                      referenceObject.VersionMatchStrategy,
                                                      referenceObject.DeprecatedIdEventTypeIdsCsv),
                            ExpectedPropertyValue = referenceObject.IdentifierTypeIdsCsv,
                        };

                        return result;
                    },
                    PropertyName = "IdentifierTypeIdsCsv",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "ObjectTypeIdsCsv should return same 'objectTypeIdsCsv' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedPropertyValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = new RecordFilterConvertedForStoredProcedure(
                                                      referenceObject.InternalRecordIdsCsv,
                                                      referenceObject.IdentifierTypeIdsCsv,
                                                      referenceObject.ObjectTypeIdsCsv,
                                                      referenceObject.StringIdsToMatchXml,
                                                      referenceObject.TagIdsCsv,
                                                      referenceObject.TagMatchStrategy,
                                                      referenceObject.VersionMatchStrategy,
                                                      referenceObject.DeprecatedIdEventTypeIdsCsv),
                            ExpectedPropertyValue = referenceObject.ObjectTypeIdsCsv,
                        };

                        return result;
                    },
                    PropertyName = "ObjectTypeIdsCsv",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "StringIdsToMatchXml should return same 'stringIdsToMatchXml' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedPropertyValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = new RecordFilterConvertedForStoredProcedure(
                                                      referenceObject.InternalRecordIdsCsv,
                                                      referenceObject.IdentifierTypeIdsCsv,
                                                      referenceObject.ObjectTypeIdsCsv,
                                                      referenceObject.StringIdsToMatchXml,
                                                      referenceObject.TagIdsCsv,
                                                      referenceObject.TagMatchStrategy,
                                                      referenceObject.VersionMatchStrategy,
                                                      referenceObject.DeprecatedIdEventTypeIdsCsv),
                            ExpectedPropertyValue = referenceObject.StringIdsToMatchXml,
                        };

                        return result;
                    },
                    PropertyName = "StringIdsToMatchXml",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "TagIdsCsv should return same 'tagIdsCsv' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedPropertyValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = new RecordFilterConvertedForStoredProcedure(
                                                      referenceObject.InternalRecordIdsCsv,
                                                      referenceObject.IdentifierTypeIdsCsv,
                                                      referenceObject.ObjectTypeIdsCsv,
                                                      referenceObject.StringIdsToMatchXml,
                                                      referenceObject.TagIdsCsv,
                                                      referenceObject.TagMatchStrategy,
                                                      referenceObject.VersionMatchStrategy,
                                                      referenceObject.DeprecatedIdEventTypeIdsCsv),
                            ExpectedPropertyValue = referenceObject.TagIdsCsv,
                        };

                        return result;
                    },
                    PropertyName = "TagIdsCsv",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "TagMatchStrategy should return same 'tagMatchStrategy' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedPropertyValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = new RecordFilterConvertedForStoredProcedure(
                                                      referenceObject.InternalRecordIdsCsv,
                                                      referenceObject.IdentifierTypeIdsCsv,
                                                      referenceObject.ObjectTypeIdsCsv,
                                                      referenceObject.StringIdsToMatchXml,
                                                      referenceObject.TagIdsCsv,
                                                      referenceObject.TagMatchStrategy,
                                                      referenceObject.VersionMatchStrategy,
                                                      referenceObject.DeprecatedIdEventTypeIdsCsv),
                            ExpectedPropertyValue = referenceObject.TagMatchStrategy,
                        };

                        return result;
                    },
                    PropertyName = "TagMatchStrategy",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "VersionMatchStrategy should return same 'versionMatchStrategy' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedPropertyValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = new RecordFilterConvertedForStoredProcedure(
                                                      referenceObject.InternalRecordIdsCsv,
                                                      referenceObject.IdentifierTypeIdsCsv,
                                                      referenceObject.ObjectTypeIdsCsv,
                                                      referenceObject.StringIdsToMatchXml,
                                                      referenceObject.TagIdsCsv,
                                                      referenceObject.TagMatchStrategy,
                                                      referenceObject.VersionMatchStrategy,
                                                      referenceObject.DeprecatedIdEventTypeIdsCsv),
                            ExpectedPropertyValue = referenceObject.VersionMatchStrategy,
                        };

                        return result;
                    },
                    PropertyName = "VersionMatchStrategy",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeprecatedIdEventTypeIdsCsv should return same 'deprecatedIdEventTypeIdsCsv' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var result = new SystemUnderTestExpectedPropertyValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = new RecordFilterConvertedForStoredProcedure(
                                                      referenceObject.InternalRecordIdsCsv,
                                                      referenceObject.IdentifierTypeIdsCsv,
                                                      referenceObject.ObjectTypeIdsCsv,
                                                      referenceObject.StringIdsToMatchXml,
                                                      referenceObject.TagIdsCsv,
                                                      referenceObject.TagMatchStrategy,
                                                      referenceObject.VersionMatchStrategy,
                                                      referenceObject.DeprecatedIdEventTypeIdsCsv),
                            ExpectedPropertyValue = referenceObject.DeprecatedIdEventTypeIdsCsv,
                        };

                        return result;
                    },
                    PropertyName = "DeprecatedIdEventTypeIdsCsv",
                });

        private static readonly DeepCloneWithTestScenarios<RecordFilterConvertedForStoredProcedure> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<RecordFilterConvertedForStoredProcedure>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeepCloneWithInternalRecordIdsCsv should deep clone object and replace InternalRecordIdsCsv with the provided internalRecordIdsCsv",
                    WithPropertyName = "InternalRecordIdsCsv",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>().ThatIs(_ => !systemUnderTest.InternalRecordIdsCsv.IsEqualTo(_.InternalRecordIdsCsv));

                        var result = new SystemUnderTestDeepCloneWithValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.InternalRecordIdsCsv,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeepCloneWithIdentifierTypeIdsCsv should deep clone object and replace IdentifierTypeIdsCsv with the provided identifierTypeIdsCsv",
                    WithPropertyName = "IdentifierTypeIdsCsv",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>().ThatIs(_ => !systemUnderTest.IdentifierTypeIdsCsv.IsEqualTo(_.IdentifierTypeIdsCsv));

                        var result = new SystemUnderTestDeepCloneWithValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.IdentifierTypeIdsCsv,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeepCloneWithObjectTypeIdsCsv should deep clone object and replace ObjectTypeIdsCsv with the provided objectTypeIdsCsv",
                    WithPropertyName = "ObjectTypeIdsCsv",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>().ThatIs(_ => !systemUnderTest.ObjectTypeIdsCsv.IsEqualTo(_.ObjectTypeIdsCsv));

                        var result = new SystemUnderTestDeepCloneWithValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ObjectTypeIdsCsv,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeepCloneWithStringIdsToMatchXml should deep clone object and replace StringIdsToMatchXml with the provided stringIdsToMatchXml",
                    WithPropertyName = "StringIdsToMatchXml",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>().ThatIs(_ => !systemUnderTest.StringIdsToMatchXml.IsEqualTo(_.StringIdsToMatchXml));

                        var result = new SystemUnderTestDeepCloneWithValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.StringIdsToMatchXml,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeepCloneWithTagIdsCsv should deep clone object and replace TagIdsCsv with the provided tagIdsCsv",
                    WithPropertyName = "TagIdsCsv",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>().ThatIs(_ => !systemUnderTest.TagIdsCsv.IsEqualTo(_.TagIdsCsv));

                        var result = new SystemUnderTestDeepCloneWithValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.TagIdsCsv,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeepCloneWithTagMatchStrategy should deep clone object and replace TagMatchStrategy with the provided tagMatchStrategy",
                    WithPropertyName = "TagMatchStrategy",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>().ThatIs(_ => !systemUnderTest.TagMatchStrategy.IsEqualTo(_.TagMatchStrategy));

                        var result = new SystemUnderTestDeepCloneWithValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.TagMatchStrategy,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeepCloneWithVersionMatchStrategy should deep clone object and replace VersionMatchStrategy with the provided versionMatchStrategy",
                    WithPropertyName = "VersionMatchStrategy",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>().ThatIs(_ => !systemUnderTest.VersionMatchStrategy.IsEqualTo(_.VersionMatchStrategy));

                        var result = new SystemUnderTestDeepCloneWithValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.VersionMatchStrategy,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "DeepCloneWithDeprecatedIdEventTypeIdsCsv should deep clone object and replace DeprecatedIdEventTypeIdsCsv with the provided deprecatedIdEventTypeIdsCsv",
                    WithPropertyName = "DeprecatedIdEventTypeIdsCsv",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                        var referenceObject = A.Dummy<RecordFilterConvertedForStoredProcedure>().ThatIs(_ => !systemUnderTest.DeprecatedIdEventTypeIdsCsv.IsEqualTo(_.DeprecatedIdEventTypeIdsCsv));

                        var result = new SystemUnderTestDeepCloneWithValue<RecordFilterConvertedForStoredProcedure>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DeprecatedIdEventTypeIdsCsv,
                        };

                        return result;
                    },
                });

        private static readonly RecordFilterConvertedForStoredProcedure ReferenceObjectForEquatableTestScenarios = A.Dummy<RecordFilterConvertedForStoredProcedure>();

        private static readonly EquatableTestScenarios<RecordFilterConvertedForStoredProcedure> EquatableTestScenarios = new EquatableTestScenarios<RecordFilterConvertedForStoredProcedure>()
            .AddScenario(() =>
                new EquatableTestScenario<RecordFilterConvertedForStoredProcedure>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new RecordFilterConvertedForStoredProcedure[]
                    {
                        new RecordFilterConvertedForStoredProcedure(
                                ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml,
                                ReferenceObjectForEquatableTestScenarios.TagIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.TagMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new RecordFilterConvertedForStoredProcedure[]
                    {
                        new RecordFilterConvertedForStoredProcedure(
                                A.Dummy<RecordFilterConvertedForStoredProcedure>().Whose(_ => !_.InternalRecordIdsCsv.IsEqualTo(ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv)).InternalRecordIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml,
                                ReferenceObjectForEquatableTestScenarios.TagIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.TagMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv),
                        new RecordFilterConvertedForStoredProcedure(
                                ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv,
                                A.Dummy<RecordFilterConvertedForStoredProcedure>().Whose(_ => !_.IdentifierTypeIdsCsv.IsEqualTo(ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv)).IdentifierTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml,
                                ReferenceObjectForEquatableTestScenarios.TagIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.TagMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv),
                        new RecordFilterConvertedForStoredProcedure(
                                ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv,
                                A.Dummy<RecordFilterConvertedForStoredProcedure>().Whose(_ => !_.ObjectTypeIdsCsv.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv)).ObjectTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml,
                                ReferenceObjectForEquatableTestScenarios.TagIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.TagMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv),
                        new RecordFilterConvertedForStoredProcedure(
                                ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv,
                                A.Dummy<RecordFilterConvertedForStoredProcedure>().Whose(_ => !_.StringIdsToMatchXml.IsEqualTo(ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml)).StringIdsToMatchXml,
                                ReferenceObjectForEquatableTestScenarios.TagIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.TagMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv),
                        new RecordFilterConvertedForStoredProcedure(
                                ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml,
                                A.Dummy<RecordFilterConvertedForStoredProcedure>().Whose(_ => !_.TagIdsCsv.IsEqualTo(ReferenceObjectForEquatableTestScenarios.TagIdsCsv)).TagIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.TagMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv),
                        new RecordFilterConvertedForStoredProcedure(
                                ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml,
                                ReferenceObjectForEquatableTestScenarios.TagIdsCsv,
                                A.Dummy<RecordFilterConvertedForStoredProcedure>().Whose(_ => !_.TagMatchStrategy.IsEqualTo(ReferenceObjectForEquatableTestScenarios.TagMatchStrategy)).TagMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv),
                        new RecordFilterConvertedForStoredProcedure(
                                ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml,
                                ReferenceObjectForEquatableTestScenarios.TagIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.TagMatchStrategy,
                                A.Dummy<RecordFilterConvertedForStoredProcedure>().Whose(_ => !_.VersionMatchStrategy.IsEqualTo(ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy)).VersionMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv),
                        new RecordFilterConvertedForStoredProcedure(
                                ReferenceObjectForEquatableTestScenarios.InternalRecordIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.IdentifierTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.ObjectTypeIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.StringIdsToMatchXml,
                                ReferenceObjectForEquatableTestScenarios.TagIdsCsv,
                                ReferenceObjectForEquatableTestScenarios.TagMatchStrategy,
                                ReferenceObjectForEquatableTestScenarios.VersionMatchStrategy,
                                A.Dummy<RecordFilterConvertedForStoredProcedure>().Whose(_ => !_.DeprecatedIdEventTypeIdsCsv.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DeprecatedIdEventTypeIdsCsv)).DeprecatedIdEventTypeIdsCsv),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void RecordFilterConvertedForStoredProcedure___Should_implement_IModel_of_RecordFilterConvertedForStoredProcedure___When_reflecting()
            {
                // Arrange
                var type = typeof(RecordFilterConvertedForStoredProcedure);

                var expectedModelMethods = typeof(IModel<RecordFilterConvertedForStoredProcedure>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<RecordFilterConvertedForStoredProcedure>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void RecordFilterConvertedForStoredProcedure___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(RecordFilterConvertedForStoredProcedure);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[]{ assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                // Act
                var actual = (RecordFilterConvertedForStoredProcedure)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "InternalRecordIdsCsv", "IdentifierTypeIdsCsv", "ObjectTypeIdsCsv", "StringIdsToMatchXml", "TagIdsCsv", "TagMatchStrategy", "VersionMatchStrategy", "DeprecatedIdEventTypeIdsCsv" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (RecordFilterConvertedForStoredProcedure)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(RecordFilterConvertedForStoredProcedure).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<RecordFilterConvertedForStoredProcedure>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                RecordFilterConvertedForStoredProcedure systemUnderTest1 = null;
                RecordFilterConvertedForStoredProcedure systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    RecordFilterConvertedForStoredProcedure systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                RecordFilterConvertedForStoredProcedure systemUnderTest1 = null;
                RecordFilterConvertedForStoredProcedure systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    RecordFilterConvertedForStoredProcedure systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RecordFilterConvertedForStoredProcedure___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    RecordFilterConvertedForStoredProcedure systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RecordFilterConvertedForStoredProcedure___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RecordFilterConvertedForStoredProcedure___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RecordFilterConvertedForStoredProcedure___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RecordFilterConvertedForStoredProcedure___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}