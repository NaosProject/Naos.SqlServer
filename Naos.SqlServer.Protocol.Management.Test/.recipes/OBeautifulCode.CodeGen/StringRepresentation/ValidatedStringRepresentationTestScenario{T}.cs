// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ValidatedStringRepresentationTestScenario{T}.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.CodeGen.ModelObject.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Recipes
{
    using global::System;

    using OBeautifulCode.Assertion.Recipes;

    /// <summary>
    /// Specifies a scenario for string representation tests.
    /// </summary>
    /// <typeparam name="T">The type of the object being tested.</typeparam>
#if !OBeautifulCodeCodeGenSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.CodeGen.ModelObject.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class ValidatedStringRepresentationTestScenario<T>
        where T : class
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatedStringRepresentationTestScenario{T}"/> class.
        /// </summary>
        /// <param name="id">The identifier of the scenario.</param>
        /// <param name="systemUnderTestExpectedStringRepresentationFunc">A func that returns the object to test and the its expected string representation.</param>
        public ValidatedStringRepresentationTestScenario(
            string id,
            Func<SystemUnderTestExpectedStringRepresentation<T>> systemUnderTestExpectedStringRepresentationFunc)
        {
            new { id }.AsTest().Must().NotBeNullNorWhiteSpace();

            new { systemUnderTestExpectedStringRepresentationFunc }.AsTest().Must().NotBeNull(id);

            var systemUnderTestExpectedStringRepresentation = systemUnderTestExpectedStringRepresentationFunc();
            var systemUnderTest = systemUnderTestExpectedStringRepresentation.SystemUnderTest;
            new { systemUnderTest }.AsTest().Must().NotBeNull(id);

            this.Id = id;
            this.SystemUnderTest = systemUnderTest;
            this.ExpectedStringRepresentation = systemUnderTestExpectedStringRepresentation.ExpectedStringRepresentation;
        }

        /// <summary>
        /// Gets the identifier of the scenario.
        /// </summary>
        public string Id { get; }

        /// <summary>
        /// Gets the object being tested.
        /// </summary>
        public T SystemUnderTest { get; }

        /// <summary>
        /// Gets the expected string representation.
        /// </summary>
        public string ExpectedStringRepresentation { get; }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = this.Id;

            return result;
        }
    }
}
